{"is_source_file": true, "format": "JavaScript", "description": "This file defines several custom error types for handling specific failure scenarios in a chatbot, a main service class for managing chatbot operations including intent matching and response generation, and methods for managing chat history.", "external_files": [], "external_methods": [], "published": ["ChatbotService", "ChatbotError", "IntentLoadError", "IntentMatchError", "ResponseGenerationError", "ChatHistoryError"], "classes": [{"name": "ChatbotError", "description": "Base class for_errors related to the chatbot functionality."}, {"name": "IntentLoadError", "description": "Error class for handling failures when loading intent data."}, {"name": "IntentMatchError", "description": "Error class for handling failures during intent matching."}, {"name": "ResponseGenerationError", "description": "Error class for handling failures during response generation."}, {"name": "ChatbotService", "description": "Service class for handling chatbot operations including intent matching and response generation, as well as managing chat history."}, {"name": "ChatHistoryError", "description": "Error class for handling issues related to chat history operations."}], "methods": [{"name": "constructor", "description": "Initializes a new instance of ChatbotService, loading intents if provided."}, {"name": "loadIntents", "description": "Loads and initializes the intent data, validates its structure, and logs any loading errors."}, {"name": "findMatchingIntent", "description": "Finds and returns the best matching intent for a given user query."}, {"name": "generateResponse", "description": "Generates a response based on the matched intent and the user's query."}, {"name": "saveMessageToHistory", "description": "Saves a message to the chat history, ensuring that the history length does not exceed a defined limit."}, {"name": "loadChatHistory", "description": "Loads the chat history from local storage."}, {"name": "clearChatHistory", "description": "Clears the chat history from local storage."}], "calls": ["console.error", "console.warn", "console.log", "localStorage.setItem", "localStorage.getItem", "localStorage.removeItem"], "search-terms": ["ChatbotService", "intent matching", "response generation", "error handling", "chat history"], "state": 2, "ctags": ["CHAT_HISTORY_KEY: /^const CHAT_HISTORY_KEY = 'medical_chatbot_history';$/;\"", "ChatHistoryError: /^class ChatHistoryError extends ChatbotError {$/;\"", "ChatbotError: /^class ChatbotError extends Error {$/;\"", "ChatbotService: /^    ChatbotService,$/;\"", "ChatbotService: /^ChatbotService.prototype.saveMessageToHistory = function(message) {$/;\"", "ChatbotService: /^class ChatbotService {$/;\"", "IntentLoadError: /^class IntentLoadError extends ChatbotError {$/;\"", "IntentMatchError: /^class IntentMatchError extends ChatbotError {$/;\"", "MAX_HISTORY_LENGTH: /^const MAX_HISTORY_LENGTH = 50; \\/\\/ Maximum number of messages to store$/;\"", "ResponseGenerationError: /^class ResponseGenerationError extends ChatbotError {$/;\"", "_calculateLevenshteinDistance: /^    _calculateLevenshteinDistance(str1, str2) {$/;\"", "_calculateStringSimilarity: /^    _calculateStringSimilarity(str1, str2) {$/;\"", "_calculateWordOrderSimilarity: /^    _calculateWordOrderSimilarity(queryWords, patternWords) {$/;\"", "answer: /^                answer: response,$/;\"", "bestMatch: /^                    bestMatch = {$/;\"", "bestMatch: /^            let bestMatch = {$/;\"", "clearChatHistory: /^ChatbotService.prototype.clearChatHistory = function() {$/;\"", "constructor: /^    constructor(message) {$/;\"", "constructor: /^    constructor(message) {$/;\"", "constructor: /^    constructor(message) {$/;\"", "constructor: /^    constructor(message) {$/;\"", "constructor: /^    constructor(message) {$/;\"", "constructor: /^    constructor(options = {}) {$/;\"", "error: /^                error: null$/;\"", "findMatchingIntent: /^    findMatchingIntent(query) {$/;\"", "generateResponse: /^    generateResponse(query) {$/;\"", "intent: /^                        intent: intent,$/;\"", "intent: /^                intent: matchedIntent.tag,$/;\"", "intent: /^                intent: null,$/;\"", "loadChatHistory: /^ChatbotService.prototype.loadChatHistory = function() {$/;\"", "loadIntents: /^    loadIntents(intentsData) {$/;\"", "result: /^            const result = {$/;\"", "saveMessageToHistory: /^ChatbotService.prototype.saveMessageToHistory = function(message) {$/;\"", "score: /^                        score: intentScore$/;\"", "score: /^                score: 0$/;\""], "filename": "/home/kavia/workspace/Chatbot-/chatbot-ui/src/services/chatbotService.js", "hash": "0f79610ca17329047708bcd236e3d267", "format-version": 3, "code-base-name": "default"}